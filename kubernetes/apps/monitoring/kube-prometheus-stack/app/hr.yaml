---
# yaml-language-server: $schema=https://kube-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 1h
  maxHistory: 1
  chartRef:
    kind: OCIRepository
    name: kube-prometheus-stack
    namespace: flux-system
  install:
    timeout: 2m
    remediation:
      retries: 1
  upgrade:
    timeout: 2m
    remediation:
      retries: 1
  values:
    crds:
      enabled: true
      upgradeJob:
        enabled: true
        forceConflicts: true
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      enabled: true
      ingress:
        enabled: false
      route:
        main:
          enabled: true
          hostnames: ["alertmanager.${SECRET_DOMAIN}"]
          parentRefs:
            - name: internal
              namespace: envoy-system
              sectionName: https
      alertmanagerSpec:
        alertmanagerConfiguration:
          name: alertmanager
          global:
            resolveTimeout: 5m
        externalUrl: https://alertmanager.${SECRET_DOMAIN}
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-filesystem
              resources:
                requests:
                  storage: 5Gi
    kubeEtcd:
      service:
        selector:
          component: kube-apiserver # etcd runs on control plane nodes
    kubeProxy:
      enabled: false
    prometheus:
      route:
        main:
          enabled: true
          hostnames: ["prometheus.${SECRET_DOMAIN}"]
          parentRefs:
            - name: internal
              namespace: envoy-system
              sectionName: https
      prometheusSpec:
        image:
          registry: docker.io
          repository: prompp/prompp
          tag: v0.5.2
        securityContext:
          runAsNonRoot: true
          runAsUser: 64535
          runAsGroup: 64535
          fsGroup: 64535
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        retention: 14d
        retentionSize: 10GB
        resources:
          requests:
            cpu: 100m
          limits:
            memory: 2000Mi
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-filesystem
              resources:
                requests:
                  storage: 50Gi
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
    additionalPrometheusRulesMap:
      cnpg:
        groups:
          - name: cnpg-barman-cloud
            rules:
            - alert: CNPGBackupFailedRecently
              expr: |
                max by (namespace, job) (barman_cloud_cloudnative_pg_io_last_failed_backup_timestamp)
                  >
                max by (namespace, job) (barman_cloud_cloudnative_pg_io_last_available_backup_timestamp)
              for: 2m
              labels:
                severity: critical
              annotations:
                summary: "CNPG backup failed ({{ $labels.namespace }}/{{ $labels.pod }})"
                description: "Most recent backup failure is newer than the most recent success."
            - alert: CNPGWalArchivingFailing
              expr: |
                max by (namespace, job) (cnpg_pg_stat_archiver_last_failed_time)
                  >
                max by (namespace, job) (cnpg_pg_stat_archiver_last_archived_time)
              for: 5m
              labels:
                severity: critical
              annotations:
                summary: "CNPG WAL archiving failing ({{ $labels.namespace }}/{{ $labels.pod }})"
                description: "Latest WAL archiving failure is newer than the last successful archival."
      dockerhub-rules:
        groups:
          - name: dockerhub
            rules:
              - alert: DockerhubRateLimitRisk
                annotations:
                  summary: Kubernetes cluster Dockerhub rate limit risk
                expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 100
                labels:
                  severity: critical
      oom-rules:
        groups:
          - name: oom
            rules:
              - alert: OomKilled
                annotations:
                  summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
                expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
                labels:
                  severity: critical
      zfs-rules:
        groups:
          - name: zfs
            rules:
              - alert: ZfsUnexpectedPoolState
                annotations:
                  summary: ZFS pool {{$labels.zpool}} on {{$labels.instance}} is in a unexpected state {{$labels.state}}
                expr: node_zfs_zpool_state{state!="online"} > 0
                labels:
                  severity: critical
