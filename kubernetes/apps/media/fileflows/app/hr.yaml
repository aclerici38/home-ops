---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app fileflows
spec:
  interval: 1h
  maxHistory: 1
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system
  install:
    crds: CreateReplace
    timeout: 2m
    remediation:
      retries: 1
  upgrade:
    crds: CreateReplace
    timeout: 2m
    remediation:
      retries: 1
  values:
    controllers:
      server:
        pod:
          hostname: ff-server
        containers:
          main: &container
            image:
              repository: ghcr.io/ant385525/fileflows
              tag: 25.8.3.5839@sha256:8fe8f972ef068c27e4ecba75e550295cc85569d46aa0047ac6c3cfba75d62d7e
            env:
              PORT: &port 5000
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/status
                    port: *port
                  initialDelaySeconds: 5
                  periodSeconds: 5
                  failureThreshold: 5
              readiness: *probes
            resources:
              requests:
                cpu: 500m
                memory: 350M
              limits:
                cpu: "12"
                memory: 16Gi
                gpu.intel.com/i915: 1
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
      node:
        pod:
          hostname: ff-node-bonds
          nodeSelector:
            kubernetes.io/hostname: bonds
        containers:
          main:
            <<: *container
            probes:
              liveness: &probes
                enabled: false
              readiness: *probes
            env:
              FFNODE: 1
              ServerUrl: http://fileflows-server:5000
    service:
      server:
        controller: server
        ports:
          http:
            port: *port
      kube-bonds:
        controller: node
        ports:
          http:
            port: *port
    route:
      main:
        hostnames:
          - ${APP}.${SECRET_DOMAIN}
        parentRefs:
          - name: internal
            namespace: network
            sectionName: https
        rules:
          - backendRefs:
              - identifier: server
                port: *port
            timeouts:
              request: 0s
    defaultPodOptions:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: Always
        runAsNonRoot: true
        seccompProfile: { type: RuntimeDefault }
        supplementalGroups: [44]
    persistence:
      config:
        existingClaim: *app
        advancedMounts:
          server:
            main:
              - path: /app/Data
      node-data:
        type: emptyDir
        advancedMounts:
          node:
            main:
              - path: /app/Data
      logs:
        type: emptyDir
        globalMounts:
          - path: /app/Logs
      temp:
        enabled: true
        type: emptyDir
        globalMounts:
          - path: /temp
            subPath: temp
          # Mutex
          - path: /tmp
            subPath: tmp
      dockermods:
        type: emptyDir
        globalMounts:
          - path: /app/DockerMods
      plugins:
        type: emptyDir
        globalMounts:
          - path: /app/Plugins
      templates:
        type: emptyDir
        globalMounts:
          - path: /app/Templates
      i18n:
        type: emptyDir
        globalMounts:
          - path: /app/Server/wwwroot/i18n
      media:
        existingClaim: media
        globalMounts:
          - path: /allMedia
