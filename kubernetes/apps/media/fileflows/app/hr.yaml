---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app fileflows
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system
  install:
    crds: CreateReplace
    timeout: 2m
    remediation:
      retries: 1
  upgrade:
    crds: CreateReplace
    timeout: 2m
    remediation:
      retries: 1
  values:
    controllers:
      server:
        pod:
          hostname: &name ff-server
        initContainers: &init
          ffmpeg-download:
            image:
              repository: docker.io/library/debian
              tag: bookworm-slim
            command:
              - sh
              - -c
              - |
                # Install if ffmpeg version doesn't exist
                if [ ! -d "/opt/ffmpeg/${FFMPEG_VERSION}" ]; then
                  echo "Installing ffmpeg ${FFMPEG_VERSION}"
                  rm -rf /opt/ffmpeg/*

                  apt-get update && apt-get install -y --no-install-suggests --no-install-recommends \
                      curl \
                      gnupg \
                      ca-certificates \
                      apt-transport-https

                  curl -m15 -fsSL https://repo.jellyfin.org/debian/jellyfin_team.gpg.key | gpg --dearmor -o /etc/apt/trusted.gpg.d/jellyfin.gpg
                  . /etc/os-release && \
                    echo "deb [arch=$(dpkg --print-architecture)] https://repo.jellyfin.org/$ID $VERSION_CODENAME main" \
                    > /etc/apt/sources.list.d/jellyfin.list
                  apt-get update && \
                  apt-get install -y --no-install-suggests --no-install-recommends jellyfin-ffmpeg7
                  cp -r /usr/lib/jellyfin-ffmpeg /opt/ffmpeg/${FFMPEG_VERSION}/
                else
                  echo ffmpeg ${FFMPEG_VERSION} already installed
                fi
        containers:
          *name : &container
            image:
              repository: docker.io/revenz/fileflows
              tag: 25.04@sha256:86c48b6119439dd07c771485520f9066973c7e8e30943a754643038a8137154e
            lifecycle:
              postStart:
                exec:
                  command:
                    - sh
                    - -c
                    - |
                      ln -sf /opt/ffmpeg/${FFMPEG_VERSION}/ffmpeg /usr/local/bin/ffmpeg && \
                      ln -sf /opt/ffmpeg/${FFMPEG_VERSION}/ffprobe /usr/local/bin/ffprobe && \
            env: &env
              PUID: 1000
              PGID: 1000
            resources:
              requests:
                cpu: 100m
                memory: 350M
              limits:
                memory: 12Gi
                nvidia.com/gpu: 1
            securityContext:
              allowPrivilegeEscalation: true
              readOnlyRootFilesystem: false
              seccompProfile: { type: RuntimeDefault }
      node:
        pod:
          hostname: &name ff-kube-bonds
        initContainers: *init
        containers:
          *name :
            <<: *container
            env:
              <<: *env
              FFNODE: 1
              ServerUrl: http://fileflows-server:5000
    service:
      server:
        controller: server
        ports:
          http:
            port: &port 5000
      kube-bonds:
        controller: node
        ports:
          http:
            port: *port
    route:
      *app :
        hostnames:
          - ${APP}.${SECRET_DOMAIN}
        parentRefs:
          - name: internal
            namespace: network
            sectionName: https
        rules:
          - backendRefs:
              - name: server
                port: *port
            timeouts:
              request: 0s
    defaultPodOptions:
      runtimeClassName: nvidia
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        runAsNonRoot: false
    persistence:
      config:
        existingClaim: *app
        advancedMounts:
          server:
            ff-server:
              - path: /app/Data
      logs:
        enabled: true
        existingClaim: fileflows-logs
        advancedMounts:
          server:
            ff-server:
              - path: /app/Logs
                subPath: ff-server
          node:
            ff-kube-bonds:
              - path: /app/Logs
                subPath: ff-kube-bonds
      temp:
        enabled: true
        type: emptyDir
      common:
        existingClaim: fileflows-common
        globalMounts:
          - path: /app/common
      ffmpeg:
        existingClaim: fileflows-ffmpeg
        globalMounts:
          - path: /opt/ffmpeg
      dockermods:
        type: emptyDir
        globalMounts:
          - path: /app/DockerMods
      manually-added:
        existingClaim: fileflows-manually-added
        globalMounts:
          - path: /app/ManuallyAdded
      media:
        existingClaim: media
        globalMounts:
          - path: /allMedia
