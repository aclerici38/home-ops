---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app cloudflare-ddns
spec:
  interval: 1h
  maxHistory: 1
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system
  install:
    crds: CreateReplace
    timeout: 2m
    remediation:
      retries: 1
  upgrade:
    crds: CreateReplace
    timeout: 2m
    remediation:
      retries: 1
  values:
    controllers:
      apartment:
        strategy: RollingUpdate
        pod:
          nodeSelector:
            location: apartment
        containers:
          main: &container
            image:
              repository: ghcr.io/larivierec/cloudflare-ddns
              tag: v1.0.10@sha256:ca4f721aa0445eb82d1c1c307833e11d457f9a6d059201ceac72696a87c55c9d
            args:
              - --zone-name
              - ${SECRET_DOMAIN}
              - --record-name
              - apartment.${SECRET_DOMAIN}
              - --provider
              - random
            env:
              ACCOUNT_TOKEN:
                valueFrom:
                  secretKeyRef:
                    name: cloudflare-secret
                    key: CLOUDFLARE_API_TOKEN
            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health/alive
                    port: &healthPort 8080
              readiness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health/ready
                    port: *healthPort
            resources:
              requests:
                memory: 64Mi
                cpu: 10m
              limits:
                memory: 128Mi
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
      house:
        strategy: RollingUpdate
        pod:
          nodeSelector:
            location: &location house
          tolerations:
            - key: "location"
              operator: "Equal"
              value: *location
              effect: "NoSchedule"
        containers:
          main:
            <<: *container
            args:
              - --zone-name
              - ${SECRET_DOMAIN}
              - --record-name
              - house.${SECRET_DOMAIN}
              - --provider
              - random
      cloud:
        strategy: RollingUpdate
        pod:
          nodeSelector:
            location: &location cloud
          tolerations:
            - key: "location"
              operator: "Equal"
              value: *location
              effect: "NoSchedule"
        containers:
          main:
            <<: *container
            args:
              - --zone-name
              - ${SECRET_DOMAIN}
              - --record-name
              - cloud.${SECRET_DOMAIN}
              - --provider
              - random
    defaultPodOptions:
      hostUsers: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        seccompProfile: { type: RuntimeDefault }
    service:
      apartment:
        controller: apartment
        ports: &ports
          http:
            port: &port 9000
          health:
            port: *healthPort
      house:
        controller: house
        ports: *ports
      cloud:
        controller: cloud
        ports: *ports
    serviceMonitor:
      apartment:
        serviceName: apartment
        endpoints: &endp
          - port: health
            scheme: http
            path: /metrics
            interval: 30s
            scrapeTimeout: 30s
      house:
        serviceName: house
        endpoints: *endp
      cloud:
        serviceName: cloud
        endpoints: *endp
