---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: fileflows
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  dependsOn:
    - name: nvidia-device-plugin
      namespace: kube-system
  install:
    timeout: 5m
    remediation:
      retries: 1
  upgrade:
    timeout: 2m
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 1
  values:
    controllers:
      server:
        pod:
          hostname: ff-server
        containers:
          app:
            image: &image
              repository: docker.io/ant385525/fileflows
              tag: latest
              pullPolicy: Always
            env:
              TZ: "${TZ}"
            resources: &resources
              requests:
                cpu: 100m
                memory: 350M
              limits:
                memory: 6Gi
                nvidia.com/gpu: 1
            securityContext: &secOps
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL
      node:
        pod:
          hostname: ff-local-node
        containers:
          app:
            image: *image
            env:
              TZ: "${TZ}"
              PUID: 1000
              PGID: 1000
              FFNODE: 1
              ServerUrl: http://fileflows:5000
            resources: *resources
            securityContext: *secOps
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: Always
        seccompProfile: { type: RuntimeDefault }
      nodeSelector:
        kubernetes.io/hostname: "bonds"
    service:
      fileflows:
        controller: server
        ports:
          http:
            port: 5000
    ingress:
      app:
        className: internal
        hosts:
          - host: "fileflows.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: fileflows
                  port: http
    persistence:
      config:
        existingClaim: temp-data
        advancedMounts:
          server:
            app:
              - path: /app/Data
      node-data:
        type: emptyDir
        advancedMounts:
          node:
            app:
              - path: /app/Data
      server-logs:
        enabled: true
        type: emptyDir
        sizeLimit: 1Gi
        advancedMounts:
          server:
            app:
              - path: /app/Logs
      node-logs:
        enabled: true
        type: emptyDir
        sizeLimit: 1Gi
        advancedMounts:
          node:
            app:
              - path: /app/Logs
      server-temp:
        enabled: true
        type: emptyDir
        advancedMounts:
          server:
            app:
              - path: /temp
      node-temp:
        enabled: true
        type: emptyDir
        advancedMounts:
          node:
            app:
              - path: /temp
      server-common:
        existingClaim: fileflows-server-common
        advancedMounts:
          server:
            app:
              - path: /app/common
      node-common:
        existingClaim: fileflows-node-common
        advancedMounts:
          node:
            app:
              - path: /app/common
      shm:
        type: emptyDir
        globalMounts:
          - path: /dev/shm
      media:
        enabled: true
        type: nfs
        server: 192.168.9.10
        path: /mnt/tank/media
        globalMounts:
          - path: /allMedia
